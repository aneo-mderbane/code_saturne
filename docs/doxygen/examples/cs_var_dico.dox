/*============================================================================
 * code_saturne documentation page
 *============================================================================*/

/*
  This file is part of code_saturne, a general-purpose CFD tool.

  Copyright (C) 1998-2024 EDF S.A.

  This program is free software; you can redistribute it and/or modify it under
  the terms of the GNU General Public License as published by the Free Software
  Foundation; either version 2 of the License, or (at your option) any later
  version.

  This program is distributed in the hope that it will be useful, but WITHOUT
  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  details.

  You should have received a copy of the GNU General Public License along with
  this program; if not, write to the Free Software Foundation, Inc., 51 Franklin
  Street, Fifth Floor, Boston, MA 02110-1301, USA.
*/

/*----------------------------------------------------------------------------*/

/*!
  \page cs_var_dico Variables and structures reference (C)

  \section cs_var_dico_intro Introduction

  This page is meant to help users find their way through when implementing
  user-defined functions or even developing inside the code
  kernel. It provides cross-reference tables containing the names of the main
  variables as well as guidelines about
  how to manage the mesh entities and the fields (variables, properties, ...).
  In addition, some naming conventions are described.

  \section cs_var_dico_namingcontent Contents

  Cross-reference tables and guidelines are organized as follows:

   - \subpage mesh
   - \subpage field
   - \subpage local
   - \subpage field_kw
   - \subpage function_objects

*/
// _____________________________________________________________________________
/*!

  \page mesh How to access and manage the main  mesh entities and mesh quantities ?

  \section cs_var_dico_mesh_vars Mesh variables

  These variables are defined in \ref cs_mesh.h.

  - Members of the global C structure \c cs_glob_mesh are accessed as: \n
    <tt>cs_glob_mesh->name</tt>, \n
    \e i.e. adding <tt> cs_glob_mesh-> </tt> in front of the name of the
    variable.
  - For a more concise syntax, defining a local \c m or \c mesh variable is recommended:
    \code{.c}
    const cs_mesh_t *m = cs_glob_mesh;
    \endcode
    so that the shorter name of the local variable may be used.
  - In functions which have a <tt> domain </tt> argument,
    using <tt> domain->mesh </tt> is recommended, and may be combined
    with the use of a local argument (as above) for conciseness.
  - Note that the number of elements given here are *local* to a given
    rank when running in parallel. Global sizes should only be used in specific
    instances, though they are available in \ref cs_mesh_t structures.

  C code                                | Description
  ------------------------------------- | ------------
  <tt> cs_glob_mesh->dim  </tt>              | Space dimension (always 3)
  <tt> cs_glob_mesh->n_cells_with_ghosts </tt> | Total number of cells on the local rank \n (n_cells + n_ghost_cells)
  <tt> cs_glob_mesh->n_cells </tt>           | Number of cells
  <tt> cs_glob_mesh->n_i_faces </tt>         | Number of interior faces
  <tt> cs_glob_mesh->n_b_faces </tt>         | Number of boundary faces
  <tt> cs_glob_mesh->n_vertices </tt>        | Number of vertices
  <tt> cs_glob_mesh->n_b_cells </tt>    | Number of boundary cells
  <tt> cs_glob_mesh->i_face_vtx_connect_size </tt> | Size of the connectivity \n interior faces -> vertices
  <tt> cs_glob_mesh->b_face_vtx_connect_size </tt>| Size of the connectivity \n boundary faces -> vertices
  <tt> cs_glob_mesh->i_face_cells </tt>      | Interior faces -> cells connectivity
  <tt> cs_glob_mesh->b_face_cells </tt>      | Boundary faces -> cells connectivity
  <tt> cs_glob_mesh->i_face_vtx_idx </tt>    | Interior faces -> vertices index
  <tt> cs_glob_mesh->i_face_vtx_lst </tt>    | Interior faces -> vertices connectivity
  <tt> cs_glob_mesh->b_face_vtx_idx </tt>    | Boundary faces -> vertices index
  <tt> cs_glob_mesh->b_face_vtx_lst </tt>    | Boundary faces -> vertices connectivity
  <tt> cs_glob_mesh->b_cells </tt>      | Boundary cell list
  <tt> cs_glob_mesh->vtx_coord </tt>         | Vertex coordinates

 Note that the faces - vertices connectivity is stored using
 [indexed arrays](@ref sec_prg_indexed_arrays).

  \section cs_var_dico_mesh_q_vars Mesh quantity variables

  These variables are defined in \ref cs_mesh_quantities.h.

  - Members of the global C structure \c cs_glob_mesh_quantities are accessed
    as:\n
    <tt>cs_glob_mesh_quantities->name</tt>, \n
    \e i.e. adding <tt> cs_glob_mesh_quantities-> </tt> in front of the name of
    the variable.
  - For a more concise syntax, defining a local \c mq variable is recommended:
    \code{.c}
    const cs_mesh_quantities_t *mq = cs_glob_mesh_quantities;
    \endcode
    so that the shorter name of the local variable may be used.
  - In functions which have a <tt> domain </tt> argument,
    using <tt> domain->mesh_quantities </tt> is recommended, and may be combined
    with the use of a local argument (as above) for conciseness.

  C code                                       |  Description
  -------------------------------------------- | -------------
   <tt> cs_glob_mesh_quantities->b_sym_flag    |  Symmetry flag for boundary faces
   <tt> cs_glob_mesh_quantities->cell_cen      |  Cell center coordinates
   <tt> cs_glob_mesh_quantities->i_face_normal |  Surface normal of interior faces
   <tt> cs_glob_mesh_quantities->b_face_normal |  Surface normal of border faces
   <tt> cs_glob_mesh_quantities->i_face_cog    |  Center of gravity of interior faces
   <tt> cs_glob_mesh_quantities->b_face_cog    |  Center of gravity of border faces
   <tt> cs_glob_mesh_quantities->cell_vol      |  Cell volume
   <tt> cs_glob_mesh_quantities->i_face_surf   |  Surface of interior faces
   <tt> cs_glob_mesh_quantities->b_face_surf   |  Surface of boundary faces
   <tt> cs_glob_mesh_quantities->i_dist        |  Distance between the cell center and \n the center of gravity of interior faces
   <tt> cs_glob_mesh_quantities->b_dist        |  Distance between the cell center and \n the center of gravity of border faces
   <tt> cs_glob_mesh_quantities->weight        |  Interior faces weighting factor

*/
// _____________________________________________________________________________
/*!

  \page field How to access and manage variables and properties using the cs_field API?

  \ref cs_var_dico_vars "Variables" and \ref cs_var_dico_props "properties" can be accessed using the \ref cs_field.h "cs_field" API.

  First, let us specify a few conventions used in code_saturne:

  - The *dynamic variables* designation includes velocity, pressure, and
    variables related to the turbulence model (<em>k</em>, <em>ε</em>,
    <em>R<sub>ij</sub></em>, <em>ω</em>, <em>ϕ</em>, \f$ \overline{f} \f$,
    <em>α</em>, <em>ν<sub>t</sub></em>). \n

  - The designation “scalar” refers to (usually scalar) variables which are
    solution of an advection equation, apart from the *dynamic* variables listed
    above; for instance the temperature, scalars which may be passive or not,
    user-defined or model-defined.

    The mean value of the square of the fluctuations of a “scalar” is a
    “scalar”, too.

    Scalars may be divided into two groups: **user-defined** scalars
    and **model-defined** (sometimes referred to as “specific physics”) scalars.

  - Depending on the thermal model used; the solved thermal scalar variable may be
    the temperature, the enthalpy, or in the case of the compressible module,
    the total energy. When the temperature is not the solved thermal variable,
    it is usually available as a property.

  - When a user scalar represents the mean of the
      square of the fluctuations of another scalar (<em>i.e.</em> the average
      \f$ \overline{\varphi^\prime\varphi^\prime} \f$ for a fluctuating scalar
      <em>ϕ</em>). This can be made either <em>via</em> the
      interface or by declaring that scalar using
      `cs_parameters_add_variable_variance` in
      \ref cs_user_parameters.c.

 \par Accessing variables and properties in C:

    - The most general way of accessing a field is to use its name: \n\n

      <tt>cs_real_t *cvar_pr = \ref cs_field_by_name "cs_field_by_name"("pressure")->val; </tt>\n
      then: \n
      <tt> cvar_pr[cell_id] </tt> \n\n

    - The main \ref cs_var_dico_vars "variables" and \ref cs_var_dico_props "properties" can be accessed using the \ref CS_F_ macro:\n\n

     - For one-dimensional arrays:\n
      <tt>pressure = CS_F_(p)->val[cell_id]</tt>, \n
      <tt>cp = CS_F_(cp)->val[cell_id]</tt> \n
      <tt>temp = CS_F_(t)->val[cell_id]</tt> \n\n

     - For multidimensional arrays:\n
      <tt>uz = CS_F_(vel)->val[3*cell_id + 2]</tt>\n\n
      These arrays can also be cast as follows (for a 3-D array):\n
      <tt>\ref cs_real_3_t *cvar_vel = (\ref cs_real_3_t *)CS_F_(vel)->val</tt> \n\n
      The cell value can then be accessed as \n
      <tt>ux = cvar_vel[cell_id][0]</tt>\n\n

      <b>\c vel, \c p, or \c cp </b> are defined in \ref cs_field_pointer.h. \n\n

    - Indexed variables (such as user scalars) and indexed properties
      are accessed as: \n
      <tt>\ref CS_FI_(name,ii-1)->val[cell_id]</tt>. \n\n

    - The thermal scalar can be accessed using the \ref cs_thermal_model_field
      function: \n
      <tt>field_t *tf = cs_thermal_model_field();</tt>\n
      then: \n
      <tt>tf->val[cell_id]</tt>. \n
      if there is no thermal scalar, cs_thermal_model_field returns NULL. \n\n

    - In any case, all variables can be accessed using the function \ref cs_field_by_name :\n
      <tt>\ref cs_real_t *cvar_pr = \ref cs_field_by_name("pressure")->val</tt> \n\n

    - A field's \ref scalar_id key-word should be ≥ 0 if it is a scalar. \n\n

    - When a field is user-defined (rather than model-defined),
      its \ref cs_field_t::type "type" flag
      should also match the \ref CS_FIELD_USER mask: \n
      <tt> if (f->type & CS_FIELD_USER) ... </tt>

  \remark Note that indexes in C begin at 0.

  Cross-reference tables are available for the variables and properties of the
  standard solver and the specific physics features:
    - \ref cs_var_dico_vars
    - \ref cs_var_dico_props
    - \ref cs_var_dico_refs
    - \ref cs_var_dico_part
    - \ref cs_var_dico_atmo
    - \ref cs_var_dico_comb
    - \ref cs_var_dico_cfbl
    - \ref cs_var_dico_elec
    - \ref cs_var_dico_cogz
    - \ref cs_var_dico_rayt

  \section cs_var_dico_vars Variables

  The C variables names are defined in
  \ref cs_field_pointer.h. \n Note that \c dt is accessible by its name
  (using the \ref cs_field_by_name family of functions), but not through
  a permanent index..

  C code                       |  Description
  ---------------------------- |  ------------
  <tt> CS_F_(p)->val           |  Pressure
  CS_F_(vel)->val              |  Velocity
  CS_F_(void_f)->val           |  Void fraction for Volume of Fluid model
  CS_F_(k)->val                |  Turbulent kinetic energy \f$ k \f$
  CS_F_(eps)->val              |  Turbulent dissipation \f$ \varepsilon \f$
  CS_F_(rij)->val              |  Reynolds stress tensor \f$ R \f$ (symmetric \f$ R_{ij} \f$ components, in the following order for each cell: xx, yy, zz, xy, yz, xz)
  CS_F_(phi)->val              |  \f$ \phi \f$ for \f$ \phi-f_b \f$ model
  CS_F_(f_bar)->val            |  \f$ f_b \f$ for \f$ \phi-f_b \f$ model
  CS_F_(alp_bl)->val           |  \f$ \alpha \f$ for \f$ Bl-v^2-k \f$ \n or EBRSM model
  CS_F_(omg)->val              |  \f$ \omega \f$ for \f$ k-\omega \f$ SST model
  CS_F_(nusa)->val             |  \f$ \widetilde{\nu}_T \f$ for Spalart-Allmaras
  CS_F_(mesh_u)->val           |  Mesh velocity
  CS_F_(h)->val                |  Enthalpy
  CS_F_(t)->val                |  Temperature </tt>


  \section cs_var_dico_props Properties

  These properties are defined in \ref cs_field_pointer.h.

  C code                                                                            | Description
  ----------------------------------------------------------------------------------| ------------
  <tt> CS_F_(dt)->val                                                               | Local time step
  CS_F_(mu)->val                                                                    | Molecular viscosity
  CS_F_(mu_t)->val                                                                  | Turbulent dynamic viscosity
  CS_F_(cp)->val                                                                    | Specific heat
  CS_F_(rho)->val                                                                   | Density (at cells)
  CS_F_(rho_b)->val[face_id]                                                        | Density (at boundary faces)
  \ref cs_real_t *cpro_smago = \ref cs_field_by_name("smagorinsky_constant^2")->val | Field id of the anisotropic turbulent viscosity
  \ref cs_real_t *cpro_cour = \ref cs_field_by_name("courant_number")->val          | Courant number
  \ref cs_real_t *cpro_four = \ref cs_field_by_name("fourier_number")->val          | Fourier number
  \ref cs_real_t *cpro_prtot = \ref cs_field_by_name("total_pressure")->val         | Total pressure at cell centers
  \ref cs_real_t *cpro_visma_s = \ref cs_field_by_name("mesh_viscosity")->val       | Mesh velocity viscosity (scalar) for the ALE module
  \ref cs_real_t *cpro_visma_v = \ref cs_field_by_name("mesh_viscosity")->val       | Mesh velocity viscosity (vector) for the ALE module
  \ref cs_real_t *cpro_tsrho = \ref cs_field_by_name("dila_st")->val                | Global dilatation source terms
  \ref cs_real_t *cpro_beta = \ref cs_field_by_name("thermal_expansion")->val       | Thermal expansion coefficient
  CS_F_(poro)->val                                                                  | Porosity
  CS_F_(t_poro)->val                                                                | Tensorial porosity
  \ref cs_real_t *bpro_forbr = \ref cs_field_by_name("boundary_forces")->val        | Field id of the stresses at boundary
  \ref cs_real_t *bpro_yplus = \ref cs_field_by_name("yplus")->val                  | Field id of \f$y^+\f$ at boundary
  \ref cs_real_t *dttens = \ref cs_field_by_name("dttens")->val                     | Field id for the dttens tensor
  CS_F_(t_b)->val                                                                   | Boundary temperature </tt>

Some physical properties such as specific heat or dynamic diffusivity are often
constant (depending on the model or user parameters).
In that case, these properties are stored as a simple real numbers
rather than in a field over all mesh cells.

- This is the case for the specific heat <em>C<sub>p</sub></em>.

  - If <em>C<sub>p</sub></em> is constant, it is based on the reference
    value \ref cs_glob_fluid_properties->cp0.\n
    When this is the case, \ref cs_glob_fluid_properties->icp should remain set to 0.\n
    When <tt>icp</tt> is initialized to 1 (by the GUI, or in
    \ref cs_user_parameters.c, it is automatically reset to the id of
    the  cell-based property field referenced in the above table.

- This is the same for the dynamic diffusivity <em>K</em> of each scalar.

  - When <em>K</em> is constant, its value is based on the field's reference
    dynamic diffusivity, accessible through the scalar field's \ref diffusivity_ref
    keyword.

    When it is variable, the matching field can be specified and accessed using
    the base scalar field's \ref diffusivity_id key (accessible using
    \ref cs_field_key_id("diffusivity_id")).\n
    For example, for a scalar field <tt>f</tt>:\n
    <tt> int k_f_id = \ref cs_field_get_key_int(f, \ref cs_field_key_id("diffusivity_id")); \n
    cs_field_t *kf = \ref cs_field_by_id(k_f_id); </tt>

  \section cs_var_dico_refs Reference physical values

  Reference physical values represent either the fluid properties if they are
  constant, either simple mean values for the initialization if properties are
  variable and defined in \ref cs_user_physical_properties.
  Reference values can be set in the GUI or in \ref cs_user_parameters.c.

   C code                                                                                                          | Description
  ---------------------------------------------------------------------------------------------------------------- | -----------
  <tt> \ref cs_glob_fluid_properties "cs_glob_fluid_properties"->\ref cs_fluid_properties_t::p0 "p0"         </tt> | Reference total pressure
  <tt> \ref cs_glob_fluid_properties "cs_glob_fluid_properties"->\ref cs_fluid_properties_t::ro0 "ro0"       </tt> | Reference density
  <tt> \ref cs_glob_fluid_properties "cs_glob_fluid_properties"->\ref cs_fluid_properties_t::viscl0 "viscl0" </tt> | Reference molecular dynamic viscosity
  <tt> \ref cs_glob_fluid_properties "cs_glob_fluid_properties"->\ref cs_fluid_properties_t::cp0 "cp0"       </tt> | Reference specific heat

  \section cs_var_dico_part Specific physical models

  \subsection cs_var_dico_atmo Atmospheric

  Defined in \ref cs_field_pointer.h. Note, `esp_id = iesp -1`.

  C code                                  | Description
  --------------------------------------- | ------------
  <tt> CS_F_(pot_t)->val </tt>            | Potential temperature
  <tt> CS_F_(ym_w)->val </tt>             | Total water content
  <tt> CS_F_(ntdrp)->val </tt>            | Total number of droplets
  <tt> CS_FI_(chemistry,esp_id)->val </tt>| Chemistry species (indexed)

  \subsection cs_var_dico_comb Coal combustion

  Defined in \ref cs_field_pointer.h.
  Note, `esp_id = iesp -1`.

  C code                             | Description
  ---------------------------------- | ------------
  <tt> CS_FI_(np,esp_id)->val  </tt> | Particles per kg for coal class
  <tt> CS_FI_(xch,esp_id)->val </tt> | Reactive coal mass fraction for coal class
  <tt> CS_FI_(xck,esp_id)->val </tt> | Coke mass fraction for coal class
  <tt> CS_FI_(xwt,esp_id)->val </tt> | Water mass fraction for coal class
  <tt> CS_FI_(h2,esp_id)->val  </tt> | Mass enthalpy for coal class (permeatic case)
  <tt> CS_FI_(f1m,esp_id)->val </tt> | Mean value light volatiles for coal class
  <tt> CS_FI_(f2m,esp_id)->val </tt> | Mean value heavy volatiles for coal class
  <tt> CS_F_(f4m)->val         </tt> | Oxydant 2 mass fraction
  <tt> CS_F_(f5m)->val         </tt> | Oxydant 3 mass fraction
  <tt> CS_F_(f6m)->val         </tt> | Water from coal drying mass fraction
  <tt> CS_F_(f7m)->val         </tt> | Carbon from coal oxidyzed by O2 mass fraction
  <tt> CS_F_(f8m)->val         </tt> | Carbon from coal gasified by CO2 mass fraction
  <tt> CS_F_(f9m)->val         </tt> | Carbon from coal gasified by H2O mass fraction
  <tt> CS_F_(fvp2m)->val       </tt> | f1f2 variance
  <tt> CS_F_(yco2)->val        </tt> | CO2 fraction
  <tt> CS_F_(yhcn)->val        </tt> | HCN fraction
  <tt> CS_F_(yno)->val         </tt> | NO fraction
  <tt> CS_F_(ynh3)->val        </tt> | NH3 enthalpy
  <tt> CS_F_(hox)->val         </tt> | Ox enthalpy


  \subsection cs_var_dico_cfbl Compressible

  Defined in \ref cs_field_pointer.h.

   C code                | Description
   ----------------------| ------------
   <tt> CS_F_(e_tot)->val| Total energy
   CS_F_(t_kelvin)->val  | Temperature, in Kelvin </tt>


  \subsection cs_var_dico_elec Electric arcs

  Defined in \ref cs_field_pointer.h. Note, `esp_id = iesp -1`.

   C code                    | Description
   --------------------------| ------------
   <tt>CS_F_(potr)->val      | Electric potential, real part
   CS_F_(poti)->val          | Electric potential, imaginary part
   CS_F_(potva)->val         | Vector potential
   CS_FI_(ycoel,esp_id)->val | Constituent mass fraction </tt>


  \subsection cs_var_dico_cogz Gas combustion

  Defined in \ref cs_field_pointer.h.

  C code              |  Description
  --------------------|  ------------
  <tt> CS_F_(fm)->val |  Mixture fraction
  CS_F_(fp2m)->val    |  Mixture fraction variance
  CS_F_(fsm)->val     |  Soot mass fraction
  CS_F_(npm)->val     |  Soot precursor number
  CS_F_(ygfm)->val    |  Fresh gas fraction
  CS_F_(yfm)->val     |  Mass fraction
  CS_F_(yfp2m)->val   |  Mass fraction variance
  CS_F_(coyfp)->val   |  Mass fraction covariance </tt>


  \subsection cs_var_dico_rayt Radiative transfer

  Defined in \ref cs_field_pointer.h. Note, `esp_id = iesp -1`.

  C code                                  | Description
  --------------------------------------- | ------------
  <tt> CS_F_(rad_energy)->val </tt>       | Radiative luminance
  <tt> CS_F_(rad_q)->val </tt>            | Radiative flux
  <tt> CS_FI_(rad_ets,esp_id)->val </tt>  | Radiative flux explicit source term
  <tt> CS_FI_(rad_its,esp_id)->val </tt>  | Radiative flux implicit source term
  <tt> CS_FI_(rad_abs,esp_id)->val </tt>  | Radiative absorption
  <tt> CS_FI_(rad_emi,esp_id)->val </tt>  | Radiative emission
  <tt> CS_FI_(rad_cak,esp_id)->val </tt>  | Radiative absorption coefficient
  <tt> CS_F_(qinci)->val </tt>            | Radiative incident radiative flux density
  <tt> CS_F_(xlam)->val </tt>             | Wall thermal conductivity
  <tt> CS_F_(epa)->val </tt>              | Wall thickness
  <tt> CS_F_(emissivity)->val </tt>       | Wall emissivity
  <tt> CS_F_(fnet)->val </tt>             | Boundary radiative flux
  <tt> CS_F_(fconv)->val </tt>            | Boundary radiative convective flux
  <tt> CS_F_(hconv)->val </tt>            | Radiative exchange coefficient


  \subsection cs_var_dico_multiphase Eulerian-Eulerian multiphase flows

  Defined in \ref cs_field_pointer.h.

  C code                                  | Description
  --------------------------------------- | ------------
  <tt> CS_FI_(yf_ncond,inc)->val </tt>    | Non-condensable gas mass fractions
  <tt> CS_FI_(qp,ip)->val </tt>           | Particles turbulent kinetic energy Q2
  <tt> CS_FI_(qfp,ip)->val </tt>          | Covariance of the turbulent Q12
  <tt> CS_FI_(qfpxx,ip)->val </tt>        | XX component of qfp
  <tt> CS_FI_(qfpxy,ip)->val </tt>        | XY component of qfp
  <tt> CS_FI_(qfpxz,ip)->val </tt>        | XZ component of qfp
  <tt> CS_FI_(qfpyx,ip)->val </tt>        | YX component of qfp
  <tt> CS_FI_(qfpyy,ip)->val </tt>        | YY component of qfp
  <tt> CS_FI_(qfpyz,ip)->val </tt>        | YZ component of qfp
  <tt> CS_FI_(qfpzx,ip)->val </tt>        | ZX component of qfp
  <tt> CS_FI_(qfpzy,ip)->val </tt>        | ZY component of qfp
  <tt> CS_FI_(qfpzz,ip)->val </tt>        | ZZ component of qfp
  <tt> CS_FI_(gamma,ip)->val </tt>        | Interfacial mass transfer
  <tt> CS_FI_(ia,ip)->val </tt>           | Interfacial area
  <tt> CS_FI_(x2,ip)->val </tt>           | Droplets x2
  <tt> CS_FI_(d32,ip)->val </tt>          | Droplets Sauter mean diameter
  <tt> CS_FI_(drag,ipcpl)->val </tt>      | Drag between phases
  <tt> CS_FI_(ad_mass,ip)->val </tt>      | Added mass
  <tt> CS_FI_(th_diff,ip)->val </tt>      | Thermal dynamic diffusivity (\f$kg.m^{-1}.s^{-1}\f$)
  <tt> CS_FI_(th_diff_t,ip)->val </tt>    | Turbulent thermal dynamic diffusivity (\f$kg.m^{-1}.s^{-1}\f$)
  <tt> CS_FI_(drho_dp,ip)->val </tt>      | dRho over dP
  <tt> CS_FI_(drho_dh,ip)->val </tt>      | dRho over dH
  <tt> CS_FI_(tau12_t,ip)->val </tt>      | Turbulent tau12 for particles
  <tt> CS_FI_(lift,ip)->val </tt>         | Particles lift
  <tt> CS_FI_(disp_t,ip)->val </tt>       | Particles turbulent dispersion
  <tt> CS_FI_(drift_vel,ip)->val </tt>    | Particles drift velocity


  \subsection cs_var_dico_advanced_field Liste of reserved advanded field names.

  A list can be found in \ref field_names "liste of predefined fields".

*/

// _____________________________________________________________________________
/*!

  \page local How to name common local variables?

  The following table provides a non-exhaustive list of local variables which
  are used in the code in a recurring manner.

  C code                |  Description
  ----------------      |  ------------
  <tt> cell_id    </tt> |  Cell index
  <tt> face_id    </tt> |  Face index
  <tt> tr_dim     </tt> |  Indicator for tensor perodicity of rotation
  <tt> i_massflux </tt> |  Mass flux at interior faces
  <tt> b_massflux </tt> |  Mass flux at boundary faces
  <tt> i_visc     </tt> |  \f$ \mu_\fij \dfrac{S_\fij}{\ipf \jpf} \f$ \n  at interior faces for the r.h.s.
  <tt> b_visc     </tt> |  \f$ \mu_\fib \dfrac{S_\fib}{\ipf \centf} \f$ \n  at border faces for the r.h.s.
  <tt> rhs        </tt> |  Right hand side \f$ \vect{Rhs} \f$

  \section cs_var_dico_conv Local naming convention for fields (C)

  Rules have been established for local names denoting fields, depending on their nature. The convention is as follows:

  - The first letter of the name indicates the location at which the field values are defined:
    - \b c for values at the cell centers.
    - \b i for values at the interior faces.
    - \b b for values at the boundary faces.
  - The next three letters indicate if the field is a variable (at the current time step or the previous time step) or a property:
    - \b var for variables at the current time step.
    - \b vara for variables at the previous time step.
    - \b pro for properties.
  - An underscore \b _ follows.

  The following examples illustrate this convention:

  \c cvar_pr: Values of the variable pressure field defined at the cell centers, at the current time step. \n
  \c cvara_pr: Values of the variable pressure field defined at the cell centers, at the previous time step. \n
  \c cpro_cp: Values of the property specific heat defined field at the cell centers. \n

*/
// _____________________________________________________________________________
/*!

  \page field_kw List of main field keys

  A non-exhaustive \ref field_keywords "list of field keys" which are used in the code is provided.

*/
// _____________________________________________________________________________
/*!

  \page function_objects List of predifined function objects

  A non-exhaustive \ref function_object_defaults "list of predefined function objects"
  which may be used in the code is provided.

*/
